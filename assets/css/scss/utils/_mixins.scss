// Mixin pour la mise en page
@mixin flexbox-rowcenter {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  margin: auto;
}

// A retenir: place-content permet de combiner justify-content et align-items

@mixin flexbox-columncenter {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

@mixin flexbox-rowstart {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
}

@mixin flexbox-columnstart {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
}

@mixin flexbox-spacebetween {
  display: flex;
  justify-content: space-between;
  align-items: stretch;
}

@mixin flexbox-spacearound {
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
}

// Fin de la mixin pour la mise en page

// Mixins pratiques trouvées sur le net

// Ellipse
@mixin text-shorten {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Fin de l'ellipse

// Mixin pour les points de rupture

@mixin respond-above($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }
    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// Autre mixin

@mixin breakpoint($point) {
  @if $point == large {
    @media only screen and (min-width: 1366px) {
      @content;
    }
  } @else if $point == desktop {
    @media only screen and (min-width: 1024px) {
      @content;
    }
  } @else if $point == tablet {
    @media only screen and (min-width: 600px) {
      @content;
    }
  }
}

// Fin

// Fin des points de rupture

// Ratio responsive

@mixin responsive-ratio($x, $y, $pseudo: false) {
  $padding: unquote(($y / $x) * 100 + "%");
  @if $pseudo {
    &:before {
      @include pseudo($pos: relative);
      width: 100%;
      padding-top: $padding;
    }
  } @else {
    padding-top: $padding;
  }
}

// Fin du ratio responsive

// Positionnement

@mixin abs-position($top, $right, $bottom, $left) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}
// Pour utiliser cette mixin, il suffit d'ajouter les valeurs dans la zone entre paretnhèses

// Fin Positionnement

// Police

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + ".eot");
    src: url($file-name + ".eot?#iefix") format("embedded-opentype"),
      url($file-name + ".woff") format("woff"),
      url($file-name + ".ttf") format("truetype"),
      url($file-name + ".svg##{$font-name}") format("svg");
    font-weight: $weight;
    font-style: $style;
  }
}

// Fin de la police

// marges intérieures et extérieures

@mixin padding($top, $right, $bottom, $left) {
  padding-top: $top;
  padding-right: $right;
  padding-bottom: $bottom;
  padding-left: $left;
}

@mixin margin($top, $right, $bottom, $left) {
  margin-top: $top;
  margin-right: $right;
  margin-bottom: $bottom;
  margin-left: $left;
}

// Fin des marges intérieures et extérieures

// Fin des mixins sur le net

//---------------------------Les mauvaises idées---------------------------------

// Mixin pour la police--inutile! Déclarer les polices dans le fichier global

// @mixin titles-and-logo {
//   @font-face {
//     font-family: Shrikhand;
//     src: url(../../../fonts/Shrikhand/Shrikhand-Regular.ttf);
//   }
// }

// @mixin text {
//   @font-face {
//     font-family: Roboto;
//     src: url(../../../fonts/Roboto/Roboto-Regular.ttf);
//   }
// }

// Fin de la mixin pour la police
